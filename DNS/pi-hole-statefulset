---
apiVersion: v1
kind: Namespace
metadata:
  name: pihole
---
apiVersion: v1
kind: Service
metadata:
  name: pihole-headless
  namespace: pihole
  labels:
    app: pihole
spec:
  clusterIP: None # This makes it a headless service for the StatefulSet
  selector:
    app: pihole
  ports:
    # Port for the web interface
    - name: http
      port: 80
      targetPort: 80
    # Port for DNS via UDP
    - name: dns-udp
      port: 53
      targetPort: 53
      protocol: UDP
    # Port for DNS via TCP
    - name: dns-tcp
      port: 53
      targetPort: 53
      protocol: TCP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pihole-ingress
  namespace: pihole
  annotations:
    # Use the correct ingress class name for your controller
    kubernetes.io/ingress.class: ingress-nginx
spec:
  rules:
  - host: pihole.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pihole-headless # The backend service is the headless service
            port:
              number: 80
---
apiVersion: v1
kind: Secret
metadata:
  name: pihole-secret
  namespace: pihole
type: Opaque
stringData:
  WEBPASSWORD: 'password'
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pihole
  namespace: pihole
  labels:
    app: pihole
spec:
  serviceName: "pihole-headless" # Must match the headless service name
  replicas: 1
  selector:
    matchLabels:
      app: pihole
  template:
    metadata:
      labels:
        app: pihole
    spec:
      containers:
      - name: pihole
        image: pihole/pihole:latest
        env:
        - name: TZ
          value: 'America/New_York'
        envFrom:
        - secretRef:
            name: pihole-secret
        ports:
        - containerPort: 53
          name: dns-udp
          protocol: UDP
        - containerPort: 53
          name: dns-tcp
          protocol: TCP
        - containerPort: 80
          name: http
          protocol: TCP
        volumeMounts:
        - name: pihole-storage
          mountPath: /etc/pihole
        - name: dnsmasq-storage
          mountPath: /etc/dnsmasq.d
      # Enable these lines for host network access if DNS is for the cluster
      # hostNetwork: true
      # dnsPolicy: ClusterFirstWithHostNet
  volumeClaimTemplates:
  - metadata:
      name: pihole-storage
    spec:
      storageClassName: local-path-reclaim
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 2Gi
  - metadata:
      name: dnsmasq-storage
    spec:
      storageClassName: local-path-reclaim
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 256Mi
